################################################################################
# Name:		{{ instance_name }}.tf
# Author:	Rodney Marable <rodney.marable@gmail.com>
# Created On:	June 3, 2019
# Last Changed:	September 25, 2019
# Deployed On:	{{ lookup('pipe','date \"+%B %-d, %Y\"') }}
{% if count > 1 %}
# Purpose:	Terraform template for instance family {{ instance_name }}
{% else %}
# Purpose:	Terraform template for instance {{ instance_name }}
{% endif %}
################################################################################
{% if enable_placement_group == 'true' %}

resource "aws_placement_group" "ec2pg-{{ instance_serial_number }}" {
  name                      =  "ec2pg-{{ instance_serial_number }}"
  provider                  = "{{ provider }}"
  strategy                  =  "{{ placement_group_strategy }}"
}
{% endif %}
{% if enable_efs == 'true' %}

resource "aws_efs_file_system"  "efs-{{ instance_name }}" {
  provider                  = "{{ provider }}"
  creation_token            = "{{ instance_serial_number }}"
  tags =  {
    Name            = "efs-{{ instance_name }}"
{% if count > 1 %}
    Purpose                 = "EFS for EC2 instance family {{ instance_name }} built by {{ instance_owner }}"
{% else %}
    Purpose                 = "EFS for EC2 instance {{ instance_name }} built by {{ instance_owner }}"
{% endif %}
    EC2InstanceBuilderTool  = "Terraform"
    EFSEncryption           = "{{ efs_encryption | bool | lower }}"
    InstanceSerialNumber    = "{{ instance_serial_number }}"
    InstanceOwner           = "{{ instance_owner }}"
    InstanceOwnerEmail      = "{{ instance_owner_email }}"
    InstanceOwnerDepartment = "{{ instance_owner_department }}"
{% if 'UNDEFINED' not in project_id %}
    ProjectID               = "{{ project_id }}"
{% endif %}
    DEPLOYMENT_DATE         = "{{ DEPLOYMENT_DATE_TAG }}"
    OperatingSystem         = "{{ base_os }}"
  }
  encrypted                 = "{{ efs_encryption | bool | lower }}"
  performance_mode          = "{{ efs_performance_mode }}"
  throughput_mode           = "bursting"
}

resource "aws_efs_mount_target" "efs-mountTarget-{{ instance_name }}" {
  provider                  = "{{ provider }}"
  file_system_id            = "${aws_efs_file_system.efs-{{instance_name }}.id}"
  subnet_id                 = "{{ subnet_id }}"
  security_groups           = ["{{ vpc_security_group_ids }}"]
}
{% endif %}

{% if request_type == 'ondemand' %}
resource "aws_instance"  "{{ instance_name }}" {
{% endif %}
{% if request_type == 'spot' %}
resource "aws_spot_instance_request"  "{{ instance_name }}" {
  spot_price                = "{{ spot_price }}"
  spot_type                 = "one-time"
{% if count > 1 %}
  launch_group              = "{{ instance_serial_number }}-lg"
{% endif %}
  wait_for_fulfillment = true
{% endif %}
  availability_zone         = "{{ az }}"
  ami                       = "{{ aws_ami }}"
  count                     = "{{ count }}"
{% if enable_efs == 'true' %}
  depends_on                = [aws_efs_mount_target.efs-mountTarget-{{ instance_name }}]
{% endif %}
  ebs_optimized             = "{{ ebs_optimized | lower }}"
{% if base_os == 'windows2019' %}
  get_password_data         = "true"
{% endif %}
  iam_instance_profile      = "{{ ec2_iam_instance_profile }}"
  instance_type             = "{{ instance_type }}"
  key_name                  = "{{ ec2_keypair }}"
  monitoring                = "true"
{% if enable_placement_group == 'true' %}
  placement_group           = "ec2pg-{{ instance_serial_number }}"
{% endif %}
{% if public_ip == 'true' %}
  associate_public_ip_address = "true"
{% else %}
  associate_public_ip_address = "false"
{% endif %}
  provider                  = "{{ provider }}"
  root_block_device {
    volume_size             = "{{ ebs_root_volume_size }}"
    volume_type             = "{{ ebs_root_volume_type }}"
    {% if ebs_root_volume_type == 'io1' %}
      iops                    = "{{ ebs_root_volume_iops }}"
    {% endif %}
  }
  ebs_block_device {
    device_name             = "/dev/sdf"
    volume_size             = "{{ ebs_device_volume_size }}"
    volume_type             = "{{ ebs_device_volume_type }}"
    encrypted               = "{{ ebs_encryption | bool | lower }}"
{% if ebs_root_volume_type == 'io1' %}
    iops                    = "{{ ebs_root_volume_iops }}"
{% endif %}
  }
  vpc_security_group_ids    = ["{{ vpc_security_group_ids }}"]
  subnet_id                 = "{{ subnet_id }}"
  tags =  {
{% if count > 1 %}
    Name                    = "{{ instance_name }}-${count.index}"
    Purpose                 = "EC2 instance family built by {{ instance_owner }}"
{% else %}
    Name                    = "{{ instance_name }}"
    Purpose                 = "EC2 instance built by {{ instance_owner }}"
{% endif %}
    EBSEncryption           = "{{ ebs_encryption | bool | lower }}"
    EC2InstanceBuilderTool  = "Terraform"
    InstanceSerialNumber    = "{{ instance_serial_number }}"
    InstanceOwner           = "{{ instance_owner }}"
    InstanceOwnerEmail      = "{{ instance_owner_email }}"
    InstanceOwnerDepartment = "{{ instance_owner_department }}"
{% if 'UNDEFINED' not in project_id %}
    ProjectID               = "{{ project_id }}"
{% endif %}
    DEPLOYMENT_DATE         = "{{ DEPLOYMENT_DATE_TAG }}"
  }
  volume_tags =  {
    EC2InstanceBuilderTool  = "Terraform"
{% if count > 1 %}
    Name                    = "{{ instance_name }}-${count.index}"
    MountedBy               = "{{ instance_name }}-${count.index}"
    Purpose                 = "EC2 instance family built by {{ instance_owner }}"
{% else %}
    Name                    = "{{ instance_name }}"
    MountedBy               = "{{ instance_name }}"
    Purpose                 = "EC2 instance built by {{ instance_owner }}"
{% endif %}
    InstanceSerialNumber    = "{{ instance_serial_number }}"
    InstanceOwner           = "{{ instance_owner }}"
    InstanceOwnerEmail      = "{{ instance_owner_email }}"
    InstanceOwnerDepartment = "{{ instance_owner_department }}"
{% if 'UNDEFINED' not in project_id %}
    ProjectID               = "{{ project_id }}"
{% endif %}
    DEPLOYMENT_DATE         = "{{ DEPLOYMENT_DATE_TAG }}"
    EBSEncryption           = "{{ ebs_encryption | bool | lower }}"
  }
{% if request_type == "spot" %}
  provisioner "local-exec" {
{% if count > 1 %}
    command = "aws --region {{ region }} ec2 create-tags --resource ${self.spot_instance_id} --tags Key=Name,Value={{ instance_name }}-${count.index} Key=InstanceSerialNumber,Value={{ instance_serial_number }} Key=InstanceOwner,Value={{ instance_owner }} Key=InstanceOwnerEmail,Value={{ instance_owner_email }} Key=InstanceOwnerDepartment,Value={{ instance_owner_department }} Key=InstanceFamily,Value={{ instance_serial_number }}-{{ instance_type }} Key=EC2RequestType,Value={{ request_type }}{% if 'UNDEFINED' not in project_id %} Key=ProjectId,Value={{ project_id }}{% endif %} Key=DEPLOYMENT_DATE,Value=\"{{ DEPLOYMENT_DATE_TAG }}\" Key=OperatingSystem,Value={{ base_os }} Key=EBSEncryption,Value={{ ebs_encryption | bool | lower }}"
{% else %}
    command = "aws --region {{ region }} ec2 create-tags --resource ${self.spot_instance_id} --tags Key=Name,Value={{ instance_name }} Key=InstanceSerialNumber,Value={{ instance_serial_number }} Key=InstanceOwner,Value={{ instance_owner }} Key=InstanceOwnerEmail,Value={{ instance_owner_email }} Key=InstanceOwnerDepartment,Value={{ instance_owner_department }} Key=InstanceFamily,Value={{ instance_serial_number }}-{{ instance_type }} Key=EC2RequestType,Value={{ request_type }}{% if 'UNDEFINED' not in project_id %} Key=ProjectId,Value={{ project_id }}{% endif %} Key=DEPLOYMENT_DATE,Value=\"{{ DEPLOYMENT_DATE_TAG }}\" Key=OperatingSystem,Value={{ base_os }} Key=EBSEncryption,Value={{ ebs_encryption | bool | lower }}"
{% endif %}
  }
{% endif %}
{% if 'windows2019' not in base_os %}
  user_data     = "${file("instance_userdata.{{ instance_name }}.sh")}"
  provisioner "file" {
    source      = "{{ build_instance_script }}"
    destination = "/tmp/{{ build_instance_script }}"
  connection {
    type        = "ssh"
{% if public_ip == 'true' %}
    host        = self.public_ip
{% else %}
    host        = self.private_ip
{% endif %}
    user        = "{{ ec2_user }}"
    agent       =  false
    private_key = "${file("{{ ssh_keypair_file }}")}"
    }
  }
  provisioner "file" {
    source      = "{{ custom_user_script }}"
    destination = "/tmp/{{ custom_user_script }}"
  connection {
    type        = "ssh"
{% if public_ip == 'true' %}
    host        = self.public_ip
{% else %}
    host        = self.private_ip
{% endif %}
    user        = "{{ ec2_user }}"
    agent       =  false
    private_key = "${file("{{ ssh_keypair_file }}")}"
    }
  }
  provisioner "remote-exec" {
    inline = [
      "chmod 0755 /tmp/{{ build_instance_script }}",
      "sh /tmp/{{ build_instance_script }}",
      "sh /tmp/{{ custom_user_script }}",
    ]
  connection {
    type        = "ssh"
{% if public_ip == 'true' %}
    host        = self.public_ip
{% else %}
    host        = self.private_ip
{% endif %}
    user        = "{{ ec2_user }}"
    agent       =  false
    private_key = "${file("{{ ssh_keypair_file }}")}"
    }
  }
{% endif %}
{% if enable_efs == 'true' %}
  provisioner "remote-exec" {
    inline = [
{% if efs_encryption == 'true' %}
{% if base_os == 'centos6' or base_os == 'ubuntu1404' %}
      "sudo su -c \"echo '${aws_efs_mount_target.efs-mountTarget-{{ instance_name }}.dns_name}:/ /efs nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 0 0' >> /etc/fstab\"",
{% else %}
      "sudo su -c \"echo '${aws_efs_mount_target.efs-mountTarget-{{ instance_name }}.dns_name}:/ /efs efs tls,_netdev 0 0' >> /etc/fstab\"",
{% endif %}
{% else %}
{% if base_os == 'centos6' or base_os == 'ubuntu1404' %}
      "sudo su -c \"echo '${aws_efs_mount_target.efs-mountTarget-{{ instance_name }}.dns_name}:/ /efs nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 0 0' >> /etc/fstab\"",
{% else %}
      "sudo su -c \"echo '${aws_efs_mount_target.efs-mountTarget-{{ instance_name }}.dns_name}:/ /efs efs defaults,_netdev 0 0' >> /etc/fstab\"",
{% endif %}
{% endif %}
      "sudo mount /efs",
    ]
  connection {
    type        = "ssh"
{% if public_ip == 'true' %}
    host        = self.public_ip
{% else %}
    host        = self.private_ip
{% endif %}
    user        = "{{ ec2_user }}"
    agent       =  false
    private_key = "${file("{{ ssh_keypair_file }}")}"
    }
  }
{% endif %}
{% if enable_fsx == 'true' or base_os == 'centos6' %}
  provisioner "local-exec" {
{% if request_type == "ondemand" %}
    command = "aws --region {{ region }} ec2 reboot-instances --instance-ids ${self.id}"
{% else %}
    command = "aws --region {{ region }} ec2 reboot-instances --instance-ids ${self.spot_instance_id}"
{% endif %}
  }
{% endif %}
}
{% if request_type == "ondemand" %}
output "instance_ip_addresses" {
{% if public_ip == 'true' %}
  value = "${join(",", aws_instance.{{ instance_name }}.*.public_ip)}"
{% else %}
  value = "${join(",", aws_instance.{{ instance_name }}.*.private_ip)}"
{% endif %}
}
output "instance_public_dns" {
{% if public_ip == 'true' %}
  value = "${join(",", aws_instance.{{ instance_name }}.*.public_dns)}"
{% else %}
  value = "${join(",", aws_instance.{{ instance_name }}.*.private_dns)}"
{% endif %}
}
output "instance_name_index" {
  value = "${join(",", aws_instance.{{ instance_name }}.*.tags.Name)}"
}
output "instance_id_list" {
  value = "${join(",", aws_instance.{{ instance_name }}.*.id)}"
}
{% endif %}
{% if request_type == "spot" %}
output "instance_ip_addresses" {
{% if public_ip == 'true' %}
  value = "${join(",", aws_spot_instance_request.{{ instance_name }}.*.public_ip)}"
{% else %}
  value = "${join(",", aws_spot_instance_request.{{ instance_name }}.*.private_ip)}"
{% endif %}
}
output "instance_public_dns" {
{% if public_ip == 'true' %}
  value = "${join(",", aws_spot_instance_request.{{ instance_name }}.*.public_dns)}"
{% else %}
  value = "${join(",", aws_spot_instance_request.{{ instance_name }}.*.private_dns)}"
{% endif %}
}
output "instance_name_index" {
  value = "${join(",", aws_spot_instance_request.{{ instance_name }}.*.tags.Name)}"
}
output "instance_id_list" {
  value = "${join(",", aws_spot_instance_request.{{ instance_name }}.*.spot_instance_id)}"
}
{% endif %}
